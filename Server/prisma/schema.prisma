generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  email            String            @unique
  password         String
  firstName        String
  lastName         String
  isActive         Boolean           @default(true)
  role             String            @default("user")
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  refreshToken     String?
  Comment          Comment[]
  Subscription     Subscription[]
  likedVideos      LikedVideo[]
  bookmarkedVideos BookmarkedVideo[]
  watchHistory     WatchHistory[]
  Feedback         Feedback[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  userId    Int
  lessonId  Int
  createdAt DateTime @default(now())
  Lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id])
}

model Course {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  subject     String
  standard    Int
  createdAt   DateTime @default(now())
  Lesson      Lesson[]
  Feedback    Feedback[]
}

model Lesson {
  id                Int               @id @default(autoincrement())
  title             String
  description       String?
  contentUrl        String
  courseId          Int
  subject           String            @default("Uncategorized")
  createdAt         DateTime          @default(now())
  Comment           Comment[]
  Course            Course            @relation(fields: [courseId], references: [id])
  likedByUsers      LikedVideo[]
  bookmarkedByUsers BookmarkedVideo[]
  watchHistories    WatchHistory[]
  Feedback          Feedback[]
}

model Subscription {
  id        Int      @id @default(autoincrement())
  userId    Int
  startDate DateTime @default(now())
  endDate   DateTime
  active    Boolean  @default(true)
  User      User     @relation(fields: [userId], references: [id])
}

model LikedVideo {
  id        Int      @id @default(autoincrement())
  userId    Int
  lessonId  Int
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model BookmarkedVideo {
  id        Int      @id @default(autoincrement())
  userId    Int
  lessonId  Int
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model WatchHistory {
  id        Int      @id @default(autoincrement())
  userId    Int
  lessonId  Int
  watchedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}
model Feedback {
  id         Int      @id @default(autoincrement())
  content    String
  createdAt  DateTime @default(now())
  userId     Int
  courseId   Int?
  lessonId   Int?

  User       User     @relation(fields: [userId], references: [id])
  Course     Course?  @relation(fields: [courseId], references: [id])
  Lesson     Lesson?  @relation(fields: [lessonId], references: [id])
}
model Notification {
  id         Int      @id @default(autoincrement())
  message    String
  type       String   // e.g., "feedback", "subscription", "issue"
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
}

